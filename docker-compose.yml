# Файл docker-compose должен начинаться с тега версии.
# Мы используем "3" так как это - самая свежая версия на момент написания этого кода.

version: "3.11"
# Следует учитывать, что docker-composes работает с сервисами.
# 1 сервис = 1 контейнер.
# Сервисом может быть клиент, сервер, сервер баз данных...
# Раздел, в котором будут описаны сервисы, начинается с 'services'.

services:
  redis:
    container_name: redis
    image: redis:7.2.4

  # supabase-db:
  #   container_name: supabase-db
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   image: supabase/postgres:15.1.0.103
  #   environment:
  #     POSTGRES_DB: postgres
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #   volumes:
  #     - supabase-db-data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"

  # supabase-auth:
  #   container_name: supabase-auth
  #   image: supabase/gotrue:v2.1.0
  #   environment:
  #     GOTRUE_DB_HOST: supabase-db
  #     GOTRUE_DB_PORT: 5432
  #     GOTRUE_DB_USER: postgres
  #     GOTRUE_DB_PASSWORD: postgres
  #     GOTRUE_DB_NAME: supabase
  #     GOTRUE_JWT_SECRET: your_jwt_secret
  #   depends_on:
  #     - supabase-db
  #   ports:
  #     - "9999:9999"

  # supabase-storage:
  #   container_name: supabase-storage
  #   image: supabase/storage:v1.0.0
  #   environment:
  #     STORAGE_DB_HOST: supabase-db
  #     STORAGE_DB_PORT: 5432
  #     STORAGE_DB_USER: postgres
  #     STORAGE_DB_PASSWORD: postgres
  #     STORAGE_DB_NAME: supabase
  #     STORAGE_SERVER_PORT: 8080
  #     STORAGE_JWT_SECRET: your_jwt_secret
  #   depends_on:
  #     - supabase-db
  #   ports:
  #     - "8080:8080"

  # supabase-realtime:
  #   container_name: supabase-realtime
  #   image: supabase/realtime:v2.30.18
  #   environment:
  #     DB_HOST: supabase-db
  #     DB_PORT: 5432
  #     DB_USER: postgres
  #     DB_PASSWORD: postgres
  #     DB_NAME: supabase
  #     JWT_SECRET: your_jwt_secret
  #   depends_on:
  #     - supabase-db
  #   ports:
  #     - "4000:4000"

  # supabase-postgrest:
  #   container_name: supabase-postgrest
  #   image: postgrest/postgrest:v11.0.0
  #   environment:
  #     PGRST_DB_URI: postgres://postgres:postgres@supabase-db:5432/supabase
  #     PGRST_DB_ANON_ROLE: web_anon
  #     PGRST_DB_SCHEMA: public
  #     PGRST_SERVER_PORT: 3000
  #   depends_on:
  #     - supabase-db
  #   ports:
  #     - "3000:3000"

  dbmate:
    container_name: dbmate
    build:
      context: .
      dockerfile: dbmate/Dockerfile
    image: amacneil/dbmate:2.6.0
    depends_on:
      - supabase-db

  # Как уже было сказано, мы собираемся создать клиентское и серверное приложения.
  # Это означает, что нам нужно два сервиса.
  # Первый сервис (контейнер): сервер.
  # Назвать его можно так, как нужно разработчику.
  # Понятное название сервиса помогает определить его роль.
  # Здесь мы, для именования соответствующего сервиса, используем ключевое слово 'server'.

  golang:
    # Ключевое слово "build" позволяет задать
    # путь к файлу Dockerfile, который нужно использовать для создания образа,
    # который позволит запустить сервис.
    # Здесь 'server/' соответствует пути к папке сервера,
    # которая содержит соответствующий Dockerfile.
    container_name: golang
    build:
      context: golang
      dockerfile: Dockerfile
      args:
        - APP_NAME=golang
    image: golang:1.22.5
    environment:
      - DATABASE_URL
      - JWT_SECRET
      - SUPABASE_URL
      - SUPABASE_SERVICE_ROLE_KEY
    ports:
      - 9000:9000

volumes:
  supabase-db-data:
  pg-data:
